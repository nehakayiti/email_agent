{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunilkayiti/email_agent/frontend/src/lib/auth.ts"],"sourcesContent":["export const initiateGoogleLogin = () => {\n    window.location.href = `${process.env.NEXT_PUBLIC_API_URL}/auth/login`;\n};\n\nexport const getToken = (): string | null => {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem('auth_token');\n};\n\nexport const setToken = (token: string) => {\n    if (typeof window === 'undefined') return;\n    localStorage.setItem('auth_token', token);\n};\n\nexport const removeToken = () => {\n    if (typeof window === 'undefined') return;\n    localStorage.removeItem('auth_token');\n};\n\nexport const handleAuthError = () => {\n    removeToken();\n    \n    // Prevent redirect loops by checking if we're already on the login page\n    // or in the authentication flow\n    if (typeof window !== 'undefined' && \n        !window.location.pathname.includes('/auth') &&\n        !window.location.pathname.includes('/login')) {\n        \n        // Use a flag in sessionStorage to prevent multiple redirects\n        if (!sessionStorage.getItem('auth_redirect_in_progress')) {\n            sessionStorage.setItem('auth_redirect_in_progress', 'true');\n            \n            // Clear the flag after navigation completes\n            window.addEventListener('load', () => {\n                sessionStorage.removeItem('auth_redirect_in_progress');\n            }, { once: true });\n            \n            // Redirect to login page with auth_error parameter\n            window.location.href = '/login?auth_error=session_expired';\n        }\n    }\n};\n\nexport const isAuthenticated = (): boolean => {\n    const token = getToken();\n    return !!token;\n};\n\nexport const logout = async () => {\n    try {\n        // Call the backend logout endpoint\n        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/logout`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${getToken()}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        if (!response.ok) {\n            console.error('Logout failed:', response.statusText);\n        } else {\n            console.log('Logged out successfully');\n        }\n    } catch (error) {\n        console.error('Logout error:', error);\n    } finally {\n        // Always remove the token from local storage\n        removeToken();\n        \n        // Redirect to login page\n        if (typeof window !== 'undefined') {\n            window.location.href = '/login';\n        }\n    }\n}; "],"names":[],"mappings":";;;;;;;;;AAAO,MAAM,sBAAsB;IAC/B,OAAO,QAAQ,CAAC,IAAI,GAAG,2DAAmC,WAAW,CAAC;AAC1E;AAEO,MAAM,WAAW;IACpB,wCAAmC,OAAO;;AAE9C;AAEO,MAAM,WAAW,CAAC;IACrB,wCAAmC;;AAEvC;AAEO,MAAM,cAAc;IACvB,wCAAmC;;AAEvC;AAEO,MAAM,kBAAkB;IAC3B;IAEA,wEAAwE;IACxE,gCAAgC;IAChC,IAAI,gBAAkB,eAClB,CAAC,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,YACnC,CAAC,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW;;IAclD;AACJ;AAEO,MAAM,kBAAkB;IAC3B,MAAM,QAAQ;IACd,OAAO,CAAC,CAAC;AACb;AAEO,MAAM,SAAS;IAClB,IAAI;QACA,mCAAmC;QACnC,MAAM,WAAW,MAAM,MAAM,6DAAmC,YAAY,CAAC,EAAE;YAC3E,QAAQ;YACR,SAAS;gBACL,iBAAiB,CAAC,OAAO,EAAE,YAAY;gBACvC,gBAAgB;YACpB;QACJ;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,QAAQ,KAAK,CAAC,kBAAkB,SAAS,UAAU;QACvD,OAAO;YACH,QAAQ,GAAG,CAAC;QAChB;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iBAAiB;IACnC,SAAU;QACN,6CAA6C;QAC7C;QAEA,yBAAyB;QACzB,uCAAmC;;QAEnC;IACJ;AACJ"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunilkayiti/email_agent/frontend/src/lib/api.ts"],"sourcesContent":["import { getToken, handleAuthError, initiateGoogleLogin } from './auth';\n\nexport interface Email {\n    id: string;\n    gmail_id: string;\n    thread_id: string;\n    subject: string;\n    from_email: string;\n    received_at: string;\n    snippet: string;\n    labels: string[];\n    is_read: boolean;\n    is_processed: boolean;\n    importance_score: number;\n    category: string;\n    raw_data?: any;\n    created_at: string;\n}\n\ninterface PaginationMetadata {\n    total: number;\n    limit: number;\n    current_page: number;\n    total_pages: number;\n    has_next: boolean;\n    has_previous: boolean;\n    next_page: number | null;\n    previous_page: number | null;\n}\n\ninterface EmailsResponse {\n    emails: Email[];\n    pagination: PaginationMetadata;\n}\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n\nif (!API_URL) {\n    throw new Error('NEXT_PUBLIC_API_URL environment variable is not set');\n}\n\nfunction isEmailArray(data: unknown): data is Email[] {\n    return Array.isArray(data) && data.every(item => \n        typeof item === 'object' && \n        item !== null && \n        'id' in item && \n        'subject' in item &&\n        'from_email' in item &&\n        'received_at' in item\n    );\n}\n\nfunction isEmailsResponse(data: unknown): data is EmailsResponse {\n    return (\n        typeof data === 'object' &&\n        data !== null &&\n        'emails' in data &&\n        isEmailArray((data as EmailsResponse).emails) &&\n        'pagination' in data &&\n        typeof (data as EmailsResponse).pagination === 'object'\n    );\n}\n\nexport async function fetchWithAuth<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const token = getToken();\n    \n    if (!token) {\n        console.log('No authentication token found');\n        handleAuthError();\n        throw new Error('No authentication token found');\n    }\n\n    try {\n        console.log(`Making API request to ${API_URL}${endpoint}`);\n        const response = await fetch(`${API_URL}${endpoint}`, {\n            ...options,\n            headers: {\n                ...options.headers,\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (!response.ok) {\n            if (response.status === 401) {\n                console.log('Authentication failed: Invalid or expired token');\n                handleAuthError();\n                throw new Error('Authentication failed. Token expired. Redirecting to login...');\n            }\n\n            const errorData = await response.json().catch(() => null);\n            throw new Error(\n                errorData?.detail || \n                `API error: ${response.status} ${response.statusText}`\n            );\n        }\n\n        const data = await response.json();\n        console.log(`API response from ${endpoint}:`, data);\n        return data as T;\n    } catch (error) {\n        console.error('API request failed:', error);\n        throw error;\n    }\n}\n\nexport interface EmailsParams {\n    category?: string;\n    importance_threshold?: number;\n    limit?: number;\n    page?: number;\n    status?: 'read' | 'unread';\n    label?: string;\n    showAll?: boolean;\n    read_status?: boolean;\n}\n\nexport async function getEmails(params: EmailsParams = {}): Promise<EmailsResponse> {\n    const queryParams = new URLSearchParams();\n    \n    if (params.category) {\n        queryParams.append('category', params.category);\n    }\n    \n    if (params.importance_threshold !== undefined) {\n        queryParams.append('importance_threshold', params.importance_threshold.toString());\n    }\n    \n    if (params.limit) {\n        queryParams.append('limit', params.limit.toString());\n    }\n    \n    if (params.page) {\n        queryParams.append('page', params.page.toString());\n    }\n    \n    if (params.status) {\n        queryParams.append('status', params.status);\n    }\n    \n    if (params.read_status !== undefined) {\n        queryParams.append('read_status', params.read_status.toString());\n    }\n    \n    if (params.label) {\n        queryParams.append('label', params.label);\n    }\n    \n    if (params.showAll) {\n        queryParams.append('show_all', 'true');\n    }\n    \n    const queryString = queryParams.toString();\n    const endpoint = `/emails${queryString ? `?${queryString}` : ''}`;\n    \n    const data = await fetchWithAuth<EmailsResponse>(endpoint);\n    \n    if ('error' in data && 'status' in data) {\n        console.error('Error fetching emails:', data.error);\n        return {\n            emails: [],\n            pagination: {\n                total: 0,\n                limit: params.limit || 20,\n                current_page: params.page || 1,\n                total_pages: 0,\n                has_next: false,\n                has_previous: false,\n                next_page: null,\n                previous_page: null\n            }\n        };\n    }\n    \n    if (!isEmailsResponse(data)) {\n        console.error('Invalid email data received:', data);\n        throw new Error('Invalid response format: Expected an object with emails array and pagination metadata');\n    }\n    \n    return data;\n}\n\nexport async function getEmailById(id: string): Promise<Email> {\n    const data = await fetchWithAuth<Email>(`/emails/${id}`);\n    if (!data || typeof data !== 'object' || !('id' in data)) {\n        console.error('Invalid email data received:', data);\n        throw new Error('Invalid response format: Expected an email object');\n    }\n    return data as Email;\n}\n\n// Analytics Response Types\ninterface SentimentTrendItem {\n  date: string;\n  sentiment: number;\n}\n\ninterface SentimentAnalyticsResponse {\n  total_emails: number;\n  period_days: number;\n  average_sentiment: number;\n  sentiment_distribution: {\n    positive: number;\n    neutral: number;\n    negative: number;\n  };\n  sentiment_trend: SentimentTrendItem[];\n}\n\ninterface ResponseTimeAnalyticsResponse {\n  periods: Record<string, number>;\n  unit: string;\n}\n\ninterface VolumeDataItem {\n  date: string;\n  count: number;\n}\n\ninterface VolumeAnalyticsResponse {\n  daily_volume: VolumeDataItem[];\n  total_days: number;\n  total_emails: number;\n}\n\ninterface TopContactItem {\n  email: string;\n  count: number;\n}\n\ninterface TopContactsResponse {\n  top_contacts: TopContactItem[];\n  period_days: number;\n  total_contacts: number;\n}\n\n// Analytics Types\ninterface SentimentAnalytics {\n  dates: string[];\n  scores: number[];\n}\n\ninterface ResponseTimeAnalytics {\n  periods: string[];\n  averages: number[];\n}\n\ninterface VolumeAnalytics {\n  dates: string[];\n  counts: number[];\n}\n\ninterface TopContactsAnalytics {\n  contacts: string[];\n  counts: number[];\n}\n\n// Analytics API endpoints\nexport async function getSentimentAnalytics(days: number = 30): Promise<SentimentAnalytics> {\n  const response = await fetchWithAuth<SentimentAnalyticsResponse>(`/analytics/sentiment?days=${days}`);\n  console.log('Sentiment Analytics Response:', response);\n  \n  if (!response?.sentiment_trend || !Array.isArray(response.sentiment_trend)) {\n    throw new Error('Invalid sentiment analytics response format');\n  }\n\n  return {\n    dates: response.sentiment_trend.map((item: SentimentTrendItem) => item.date),\n    scores: response.sentiment_trend.map((item: SentimentTrendItem) => item.sentiment)\n  };\n}\n\nexport async function getResponseTimeAnalytics(periods: number = 90): Promise<ResponseTimeAnalytics> {\n  const response = await fetchWithAuth<ResponseTimeAnalyticsResponse>(`/analytics/response-time?periods=${periods}`);\n  console.log('Response Time Analytics Response:', response);\n  \n  if (!response?.periods || typeof response.periods !== 'object') {\n    throw new Error('Invalid response time analytics response format');\n  }\n\n  const periodNames = Object.keys(response.periods);\n  const periodValues = Object.values(response.periods) as number[];\n\n  return {\n    periods: periodNames.map(name => name.replace('_days', ' Days')),\n    averages: periodValues\n  };\n}\n\nexport async function getVolumeAnalytics(days: number = 30): Promise<VolumeAnalytics> {\n  const response = await fetchWithAuth<VolumeAnalyticsResponse>(`/analytics/volume?days=${days}`);\n  console.log('Volume Analytics Response:', response);\n  \n  if (!response?.daily_volume || !Array.isArray(response.daily_volume)) {\n    throw new Error('Invalid volume analytics response format');\n  }\n\n  return {\n    dates: response.daily_volume.map((item: VolumeDataItem) => item.date),\n    counts: response.daily_volume.map((item: VolumeDataItem) => item.count)\n  };\n}\n\nexport async function getTopContacts(limit: number = 10, days: number = 30): Promise<TopContactsAnalytics> {\n  const response = await fetchWithAuth<TopContactsResponse>(`/analytics/top-contacts?limit=${limit}&days=${days}`);\n  console.log('Top Contacts Response:', response);\n  \n  if (!response?.top_contacts || !Array.isArray(response.top_contacts)) {\n    throw new Error('Invalid top contacts response format');\n  }\n\n  return {\n    contacts: response.top_contacts.map((item: TopContactItem) => item.email),\n    counts: response.top_contacts.map((item: TopContactItem) => item.count)\n  };\n}\n\nexport type { \n  SentimentAnalytics, \n  ResponseTimeAnalytics, \n  VolumeAnalytics, \n  TopContactsAnalytics \n};\n\nexport interface DbInsightsResponse {\n  user_count: number;\n  email_count: number;\n  last_sync: string | null;\n  user_syncs: Array<{\n    email: string;\n    last_fetched_at: string;\n    sync_cadence_minutes: number;\n  }>;\n  table_sizes: Array<{\n    table_name: string;\n    size: string;\n    raw_size: number;\n  }>;\n  sample_token: string;\n}\n\nexport async function getDbInsights(): Promise<DbInsightsResponse> {\n  try {\n    const response = await fetchWithAuth<DbInsightsResponse>(`/analytics/db-insights`);\n    return response;\n  } catch (error) {\n    console.error('Error fetching DB insights:', error);\n    throw error;\n  }\n}\n\nexport interface SyncResponse {\n  success?: boolean;\n  status?: string;\n  message: string;\n  sync_started_at?: string;\n  user_id?: string;\n  sync_count?: number;\n  new_email_count?: number;\n}\n\nexport async function triggerEmailSync(): Promise<SyncResponse> {\n  try {\n    const timestamp = new Date().getTime();\n    const response = await fetchWithAuth<SyncResponse>(`/emails/sync?t=${timestamp}&use_current_date=true`, {\n      method: 'POST',\n    });\n    return response;\n  } catch (error) {\n    console.error('Error triggering email sync:', error);\n    throw error;\n  }\n}\n\nexport async function getTrashedEmails(params: EmailsParams = {}): Promise<EmailsResponse> {\n  try {\n    const queryParams = new URLSearchParams();\n    \n    if (params.limit) queryParams.set('limit', params.limit.toString());\n    if (params.page) queryParams.set('page', params.page.toString());\n    \n    const queryString = queryParams.toString();\n    const url = `/emails/deleted${queryString ? `?${queryString}` : ''}`;\n    \n    const response = await fetchWithAuth<EmailsResponse>(url);\n    return response;\n  } catch (error) {\n    console.error('Error fetching trashed emails:', error);\n    throw error;\n  }\n}\n\n// Keep for backward compatibility\nexport async function getDeletedEmails(params: EmailsParams = {}): Promise<EmailsResponse> {\n  return getTrashedEmails(params);\n}\n\nexport interface UpdateLabelsResponse {\n  status: string;\n  message: string;\n  email_id: string;\n  labels: string[];\n  is_read: boolean;\n}\n\nexport async function updateEmailLabels(\n  emailId: string,\n  addLabels?: string[],\n  removeLabels?: string[]\n): Promise<UpdateLabelsResponse> {\n  try {\n    const body: Record<string, any> = {};\n    \n    if (addLabels && addLabels.length > 0) {\n      body.add_labels = addLabels;\n    }\n    \n    if (removeLabels && removeLabels.length > 0) {\n      body.remove_labels = removeLabels;\n    }\n    \n    const response = await fetchWithAuth<UpdateLabelsResponse>(`/emails/${emailId}/update-labels`, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n    \n    return response;\n  } catch (error) {\n    console.error('Error updating email labels:', error);\n    throw error;\n  }\n}\n\nexport interface UpdateCategoryResponse {\n  status: string;\n  message: string;\n  email_id: string;\n  category: string;\n  labels: string[];\n}\n\nexport async function updateEmailCategory(\n  emailId: string,\n  category: string\n): Promise<UpdateCategoryResponse> {\n  try {\n    const response = await fetchWithAuth<UpdateCategoryResponse>(`/emails/${emailId}/update-category`, {\n      method: 'POST',\n      body: JSON.stringify({ category }),\n    });\n    \n    return response;\n  } catch (error) {\n    console.error('Error updating email category:', error);\n    throw error;\n  }\n}\n\nexport async function archiveEmail(emailId: string): Promise<{ \n  status: string; \n  message: string;\n  labels?: string[];\n  category?: string;\n}> {\n  try {\n    const response = await fetchWithAuth<{ \n      status: string; \n      message: string;\n      labels?: string[];\n      category?: string;\n    }>(`/emails/${emailId}/archive`, {\n      method: 'POST',\n    });\n    \n    return response;\n  } catch (error) {\n    console.error('Error archiving email:', error);\n    throw error;\n  }\n}\n\nexport async function deleteEmail(emailId: string): Promise<{ \n  status: string; \n  message: string;\n}> {\n  try {\n    const response = await fetchWithAuth<{ \n      status: string; \n      message: string;\n    }>(`/emails/${emailId}`, {\n      method: 'DELETE',\n    });\n    \n    return response;\n  } catch (error) {\n    console.error('Error deleting email:', error);\n    throw error;\n  }\n}\n\n// Category management API functions\nexport interface Category {\n  id: number;\n  name: string;\n  display_name: string;\n  description: string | null;\n  priority: number;\n  is_system: boolean;\n  keyword_count: number;\n  sender_rule_count: number;\n}\n\nexport interface CategoryKeyword {\n  id: number;\n  keyword: string;\n  is_regex: boolean;\n  weight: number;\n  user_id: string | null;\n}\n\nexport interface SenderRule {\n  id: number;\n  pattern: string;\n  is_domain: boolean;\n  weight: number;\n  user_id: string | null;\n}\n\ninterface CategoriesResponse {\n  data: Category[];\n}\n\nexport async function getCategoriesApi(): Promise<CategoriesResponse> {\n  const data = await fetchWithAuth<Category[]>('/email-management/categories');\n  return { data };\n}\n\nexport async function initializeCategories(): Promise<any> {\n  return fetchWithAuth('/email-management/initialize-categories', {\n    method: 'POST'\n  });\n}\n\nexport async function getCategoryKeywords(categoryName: string): Promise<CategoryKeyword[]> {\n  return fetchWithAuth<CategoryKeyword[]>(`/email-management/categories/${categoryName}/keywords`);\n}\n\nexport async function getCategorySenderRules(categoryName: string): Promise<SenderRule[]> {\n  return fetchWithAuth<SenderRule[]>(`/email-management/categories/${categoryName}/sender-rules`);\n}\n\nexport async function addKeyword(categoryName: string, keyword: string): Promise<any> {\n  return fetchWithAuth('/email-management/keywords', {\n    method: 'POST',\n    body: JSON.stringify({\n      category_name: categoryName,\n      keyword\n    })\n  });\n}\n\nexport async function addSenderRule(categoryName: string, pattern: string, isDomain: boolean = true): Promise<any> {\n  return fetchWithAuth('/email-management/sender-rules', {\n    method: 'POST',\n    body: JSON.stringify({\n      category_name: categoryName,\n      pattern,\n      is_domain: isDomain\n    })\n  });\n}\n\nexport async function reprocessAllEmails(): Promise<any> {\n  return fetchWithAuth('/email-management/reprocess', {\n    method: 'POST',\n    body: JSON.stringify({})\n  });\n}\n\nexport async function deleteCategory(categoryName: string): Promise<any> {\n  return fetchWithAuth(`/email-management/categories/${categoryName}`, {\n    method: 'DELETE'\n  });\n}\n\nexport interface CreateCategoryRequest {\n  name: string;\n  display_name: string;\n  description?: string;\n  priority?: number;\n}\n\nexport async function createCategory(data: CreateCategoryRequest): Promise<Category> {\n  return fetchWithAuth('/email-management/categories', {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunilkayiti/email_agent/frontend/src/components/layout/main-layout.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { \n  HomeIcon, \n  InboxIcon, \n  TagIcon, \n  ChartBarIcon, \n  ArrowPathIcon, \n  TrashIcon, \n  EnvelopeIcon, \n  EnvelopeOpenIcon,\n  StarIcon,\n  UserGroupIcon,\n  BellAlertIcon,\n  MegaphoneIcon,\n  NewspaperIcon,\n  ChatBubbleLeftRightIcon\n} from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { getEmails, getCategoriesApi, type Email, type Category, triggerEmailSync } from '@/lib/api';\nimport { isAuthenticated, handleAuthError } from '@/lib/auth';\n\n// Define types for navigation items\ntype NavItem = {\n  name: string;\n  href?: string;\n  icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  type?: 'link' | 'divider' | 'category';\n};\n\n// Fixed navigation items that aren't categories\nconst baseNavigation: NavItem[] = [\n  // Main Views\n  { name: 'Dashboard', href: '/', icon: HomeIcon, type: 'link' },\n  { name: 'All Emails', href: '/emails', icon: InboxIcon, type: 'link' },\n  { name: 'Analytics', href: '/analytics', icon: ChartBarIcon, type: 'link' },\n  \n  // Email Status\n  { type: 'divider', name: 'Status' },\n  { name: 'Unread', href: '/emails?status=unread', icon: EnvelopeIcon, type: 'link' },\n  { name: 'Read', href: '/emails?status=read', icon: EnvelopeOpenIcon, type: 'link' },\n  \n  // Category Management Link\n  { type: 'divider', name: 'CATEGORIES' },\n  { name: 'Manage Categories', href: '/categories', icon: TagIcon, type: 'link' },\n];\n\n// Custom event name for email sync completion\nexport const EMAIL_SYNC_COMPLETED_EVENT = 'emailSyncCompleted';\n\nexport default function MainLayout({ children }: { children: React.ReactNode }) {\n  const pathname = usePathname();\n  const router = useRouter();\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [syncStatus, setSyncStatus] = useState<'success' | 'error' | null>(null);\n  const [syncMessage, setSyncMessage] = useState('');\n  const [isAuthError, setIsAuthError] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);\n  const [categoriesRefreshTrigger, setCategoriesRefreshTrigger] = useState(0);\n\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      handleAuthError();\n      return;\n    }\n\n    // Fetch categories directly from the API\n    async function fetchCategories() {\n      try {\n        const response = await getCategoriesApi();\n        // Sort categories by priority (lower number = higher priority)\n        const sortedCategories = response.data.sort((a, b) => a.priority - b.priority);\n        setCategories(sortedCategories);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    }\n    \n    fetchCategories();\n  }, [categoriesRefreshTrigger]);\n\n  // Listen for email sync completion event to refresh categories\n  useEffect(() => {\n    const handleSyncCompleted = () => {\n      // Refresh categories when emails are synced\n      setCategoriesRefreshTrigger(prev => prev + 1);\n    };\n\n    // Add event listener\n    window.addEventListener(EMAIL_SYNC_COMPLETED_EVENT, handleSyncCompleted);\n\n    // Clean up\n    return () => {\n      window.removeEventListener(EMAIL_SYNC_COMPLETED_EVENT, handleSyncCompleted);\n    };\n  }, []);\n\n  const handleSync = async () => {\n    if (isSyncing || !isAuthenticated()) return;\n    \n    try {\n      setIsSyncing(true);\n      setSyncMessage('Syncing emails...');\n      setSyncStatus(null);\n      \n      const response = await triggerEmailSync();\n      \n      // Check for success based on the response structure\n      if (response.success || response.status === 'success') {\n        setSyncStatus('success');\n        \n        // Handle the case when no new emails are found\n        if (response.sync_count === 0) {\n          setSyncMessage('No new emails to sync.');\n        } else {\n          // Extract only the count of new emails, not including checkpoint emails\n          const newEmailCount = response.new_email_count || response.sync_count || 0;\n          setSyncMessage(response.message || `Sync completed! ${newEmailCount} new emails processed.`);\n        }\n        \n        // Dispatch a custom event to notify components that sync is complete\n        window.dispatchEvent(new CustomEvent(EMAIL_SYNC_COMPLETED_EVENT, { \n          detail: { syncCount: response.sync_count || 0 } \n        }));\n        \n        // Clear the success message after 3 seconds\n        setTimeout(() => {\n          setSyncMessage('');\n          setSyncStatus(null);\n        }, 3000);\n      } else {\n        setSyncStatus('error');\n        setSyncMessage(`Sync failed: ${response.message}`);\n        // Clear the error message after 5 seconds\n        setTimeout(() => {\n          setSyncMessage('');\n          setSyncStatus(null);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error syncing emails:', error);\n      setSyncStatus('error');\n      \n      // Check if it's an auth error\n      if (error instanceof Error && \n          (error.message.includes('No authentication token found') || \n           error.message.includes('Authentication failed'))) {\n        setIsAuthError(true);\n        handleAuthError();\n        setSyncMessage('Authentication failed. Please log in again.');\n      } else {\n        setSyncMessage('Failed to sync emails. Please try again.');\n      }\n      \n      // Clear the error message after 5 seconds\n      setTimeout(() => {\n        setSyncMessage('');\n        setSyncStatus(null);\n      }, 5000);\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  // Create mapping of icons that can be used for categories\n  const getCategoryIcon = (categoryName: string) => {\n    const iconMap: Record<string, React.ComponentType<React.SVGProps<SVGSVGElement>>> = {\n      'primary': InboxIcon,\n      'important': StarIcon,\n      'social': UserGroupIcon,\n      'promotional': MegaphoneIcon,\n      'updates': BellAlertIcon,\n      'personal': TagIcon,\n      'newsletters': NewspaperIcon,\n      'forums': ChatBubbleLeftRightIcon,\n      'archive': ArrowPathIcon,\n      'trash': TrashIcon\n    };\n\n    return iconMap[categoryName.toLowerCase()] || TagIcon; // Default to TagIcon\n  };\n\n  // Create storage section with Archive and Trash\n  const storageCategories = categories.filter(cat => \n    cat.name.toLowerCase() === 'archive' || cat.name.toLowerCase() === 'trash'\n  );\n\n  // Create regular categories (excluding storage categories)\n  const regularCategories = categories.filter(cat => \n    cat.name.toLowerCase() !== 'archive' && cat.name.toLowerCase() !== 'trash'\n  );\n\n  // Create navigation items with base items and categories from database\n  const navigation: NavItem[] = [\n    ...baseNavigation,\n    \n    // Add all regular categories (sorted by priority)\n    ...regularCategories.map(category => ({\n      name: category.display_name,\n      href: `/emails?category=${category.name.toLowerCase()}`,\n      icon: getCategoryIcon(category.name),\n      type: 'category' as const\n    })),\n    \n    // Add Storage divider if we have storage categories\n    ...(storageCategories.length > 0 ? [{ type: 'divider' as const, name: 'Storage' }] : []),\n    \n    // Add storage categories\n    ...storageCategories.map(category => ({\n      name: category.display_name,\n      href: category.name.toLowerCase() === 'trash' \n        ? '/emails/deleted' \n        : `/emails?category=${category.name.toLowerCase()}`,\n      icon: getCategoryIcon(category.name),\n      type: 'category' as const\n    }))\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Left Navigation */}\n      <div className=\"fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg\">\n        <div className=\"flex h-16 items-center px-6\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <div className=\"text-2xl font-bold text-indigo-600\">EA</div>\n            <span className=\"text-lg font-semibold text-gray-900\">EmailAgent</span>\n          </Link>\n        </div>\n        <nav className=\"mt-5 px-3\">\n          {navigation.map((item) => {\n            if (item.type === 'divider') {\n              return (\n                <div key={item.name} className=\"px-2 py-1.5 text-xs font-semibold text-gray-500 uppercase tracking-wider\">\n                  {item.name}\n                </div>\n              );\n            }\n\n            if (!item.href || !item.icon) return null;\n\n            const isActive = pathname === item.href || \n              (pathname && item.href && pathname.startsWith('/emails') && item.href.startsWith('/emails') && \n                new URLSearchParams(item.href.split('?')[1]).get('category') === \n                new URLSearchParams(pathname.split('?')[1]).get('category'));\n            \n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={`group flex items-center px-2.5 py-2 my-0.5 text-sm font-medium rounded-lg ${\n                  isActive\n                    ? 'bg-indigo-50 text-indigo-600'\n                    : 'text-gray-700 hover:bg-gray-50'\n                }`}\n              >\n                <item.icon\n                  className={`mr-2.5 h-5 w-5 flex-shrink-0 ${\n                    isActive ? 'text-indigo-600' : 'text-gray-400 group-hover:text-gray-500'\n                  }`}\n                  aria-hidden=\"true\"\n                />\n                {item.name}\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"pl-64\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm\">\n          <div className=\"flex h-16 items-center justify-between px-6\">\n            <h2 className=\"text-lg font-medium text-gray-900\">\n              {/* greeting }, Sunny! */}\n            </h2>\n            \n            <div className=\"flex items-center space-x-3\">\n              {syncMessage && (\n                <span className={`text-sm font-medium px-3 py-1 rounded-md ${\n                  syncStatus === 'error' \n                    ? 'text-red-800 bg-red-100' \n                    : syncStatus === 'success'\n                      ? 'text-green-800 bg-green-100'\n                      : 'text-gray-800 bg-gray-100'\n                }`}>\n                  {syncMessage}\n                </span>\n              )}\n              <button\n                onClick={handleSync}\n                disabled={isSyncing}\n                className={`inline-flex items-center px-4 py-2 rounded-md text-sm font-medium shadow-sm ${\n                  isSyncing \n                    ? 'bg-blue-400 text-white cursor-not-allowed' \n                    : 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n                }`}\n                aria-label=\"Sync emails\"\n              >\n                <ArrowPathIcon \n                  className={`-ml-1 mr-2 h-5 w-5 ${isSyncing ? 'animate-spin' : ''}`} \n                  aria-hidden=\"true\" \n                />\n                {isSyncing ? 'Syncing...' : 'Sync Emails'}\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <main className=\"py-6 px-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 835, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}