"""Change sync_details.user_id to UUID

Revision ID: 37cba1ec317c
Revises: d0e34b30ee79
Create Date: 2025-04-20 10:49:19.776998

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '37cba1ec317c'
down_revision: Union[str, None] = 'd0e34b30ee79'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_sync_details_user_id', table_name='sync_details')
    op.drop_table('sync_details')
    op.alter_column('categorization_feedback', 'email_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('categorization_feedback', 'feedback_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('categorization_feedback', 'feedback_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_index(op.f('ix_categorization_feedback_id'), 'categorization_feedback', ['id'], unique=False)
    op.drop_column('categorization_feedback', 'created_at')
    op.create_foreign_key(None, 'category_keywords', 'email_categories', ['category_id'], ['id'], ondelete='CASCADE')
    op.alter_column('email_categorization_decisions', 'email_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('email_categorization_decisions', 'category_to',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('email_categorization_decisions', 'confidence_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('email_categorization_decisions', 'decision_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('email_categorization_decisions', 'decision_factors',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('email_categorization_decisions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('email_categorization_decisions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_email_categorization_decisions_id'), 'email_categorization_decisions', ['id'], unique=False)
    op.drop_column('email_categorization_decisions', 'category_from')
    op.drop_column('email_categorization_decisions', 'decision_reason')
    op.drop_column('email_categorization_decisions', 'rules_matched')
    op.alter_column('emails', 'is_dirty',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('sender_rules', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sender_rules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sender_rules', 'rule_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_sender_rule_category', table_name='sender_rules')
    op.drop_index('idx_sender_rule_pattern', table_name='sender_rules')
    op.drop_index('idx_sender_rule_user', table_name='sender_rules')
    op.create_foreign_key(None, 'sender_rules', 'email_categories', ['category_id'], ['id'], ondelete='CASCADE')
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'credentials',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'credentials',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(None, 'sender_rules', type_='foreignkey')
    op.create_index('idx_sender_rule_user', 'sender_rules', ['user_id'], unique=False)
    op.create_index('idx_sender_rule_pattern', 'sender_rules', ['pattern'], unique=False)
    op.create_index('idx_sender_rule_category', 'sender_rules', ['category_id'], unique=False)
    op.alter_column('sender_rules', 'rule_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('sender_rules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sender_rules', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('emails', 'is_dirty',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.add_column('email_categorization_decisions', sa.Column('rules_matched', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('email_categorization_decisions', sa.Column('decision_reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('email_categorization_decisions', sa.Column('category_from', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_email_categorization_decisions_id'), table_name='email_categorization_decisions')
    op.alter_column('email_categorization_decisions', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('email_categorization_decisions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('email_categorization_decisions', 'decision_factors',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('email_categorization_decisions', 'decision_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('email_categorization_decisions', 'confidence_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('email_categorization_decisions', 'category_to',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('email_categorization_decisions', 'email_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(None, 'category_keywords', type_='foreignkey')
    op.add_column('categorization_feedback', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_categorization_feedback_id'), table_name='categorization_feedback')
    op.alter_column('categorization_feedback', 'feedback_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('categorization_feedback', 'feedback_timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('categorization_feedback', 'email_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('sync_details',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('account_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('direction', postgresql.ENUM('GMAIL_TO_EA', 'EA_TO_GMAIL', 'BI_DIRECTIONAL', name='syncdirection'), autoincrement=False, nullable=False),
    sa.Column('sync_type', postgresql.ENUM('MANUAL', 'AUTOMATIC', name='synctype'), autoincrement=False, nullable=False),
    sa.Column('sync_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('sync_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('duration_sec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('SUCCESS', 'ERROR', name='syncstatus'), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emails_synced', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('changes_detected', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('changes_applied', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pending_ea_changes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('backend_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_freshness_sec', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sync_details_pkey')
    )
    op.create_index('ix_sync_details_user_id', 'sync_details', ['user_id'], unique=False)
    # ### end Alembic commands ###
