name: CI

on:
  push:
    branches: [ "main", "develop", "feat/**", "fix/**" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      run_e2e:
        description: "Run Playwright e2e tests"
        type: boolean
        default: false

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: email_agent_test_db
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8
      - name: Lint (black, flake8)
        working-directory: backend
        run: |
          black --check .
          flake8
      - name: Run backend tests (fast subset)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_agent_test_db
        working-directory: backend
        run: |
          # Exclude heavy integration/gmail tests in CI fast lane
          python -m pytest -q -k "not gmail and not integration"

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install
        working-directory: frontend
        run: npm ci
      - name: Lint
        working-directory: frontend
        run: npm run lint
      - name: Build
        working-directory: frontend
        run: npm run build

  e2e:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_e2e }}
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: email_agent_test_db
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Backend install
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Prepare backend env
        working-directory: backend
        run: |
          cp .env.test .env
      - name: Start backend
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/email_agent_test_db
        run: |
          nohup python -m uvicorn app.main:app --port 8000 &
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/docs >/dev/null; then exit 0; fi; sleep 2;
          done
          echo "Backend did not start in time" >&2; exit 1
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Frontend install
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps
      - name: Run Playwright e2e
        working-directory: frontend
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report
        run: npm run e2e
