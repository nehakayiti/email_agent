Objective – Deliver FlowMail Dashboard v1, a web-responsive PWA that scores every Gmail message for attention, proposes bulk clean-ups, and lets users review/undo—all before we touch a browser extension.

Scope – Back-end micro-service (FastAPI + Postgres) adds attention_score, bucket APIs, suggestion engine, action runner, and activity log; front-end React PWA consumes these APIs and surfaces Now/Later/Reference lists, toasts, and a Tone slider.

Data Sources – Only Gmail REST metadata: labels, internalDate, history.list deltas. No full-body content leaves Google.

User Flow – OAuth → Dashboard lists scored mail → daily toasts suggest sweeps → user Accept/Reject → actions sync to Gmail → timeline shows every change with one-tap Undo.

Phasing – Nine Cursor prompts: baseline CI → attention scoring → bucket endpoints → suggestion engine → action runner → activity/undo → PWA shell → Tone modes → mobile + a11y polish → release smoke.

Success KPIs – ≥90 % test coverage, <200 ms median API latency, ≤5 % undo rate on Act mode, Lighthouse PWA ≥90.

Out-of-scope – Browser extension UI, on-device ML, search, composing mail.

Assumptions – Gmail API quotas sufficient; Alembic migrations managed; Dockerized Postgres available as postgres_db.

Risks – Gmail label drift, cron timing gaps; mitigated by unit tests & retryable operations.

Definition of Done – All phases green in CI, end-to-end Gmail sandbox test passes, users can sweep promos and undo within 7 days via dashboard alone.


### Prompt 0  –  CI baseline & repo map

1. Run `pytest -q`; fail if any test fails.
2. Generate coverage: `pytest --cov backend --cov-report=term-missing`.
   Save output to `logs/coverage_phase0.txt`.
3. Parse `backend/app/routers` and print a Markdown table:
   | router | prefix | # routes |
4. Exit with ✓ when green. No code changes.

(Tip: commit the coverage file so later phases can diff.)

### Prompt 1  –  Attention Score (metadata‑only)

CONTEXT
- Repo structure unchanged since phase 0.
- Gmail API data already lands in table `emails`.

OBJECTIVE
Add a per‑message `attention_score` that relies **only** on Gmail‑visible
metadata.

  • +30  if Gmail IMPORTANT label present  
  • +20  if STARRED present  
  • −15  if CATEGORY_PROMOTIONS or CATEGORY_SOCIAL present  
  • Age penalty: `max(0, days_since_internalDate * 0.25)`  
  • Clamp 0‑100

STEPS
1. Alembic migration →  new nullable column
     `attention_score` Float  default NULL.
   Verify:
     docker exec postgres_db psql -U postgres -d email_agent_db \
       -c "\d emails"  -- must list attention_score.

2. New module `backend/app/services/attention.py`
     def compute(email: Email, now: datetime) -> float

3. Hook: after every insert/update in `gmail_sync_service`,
   call compute() and persist.

4. Unit tests (pytest):
   • high‑importance star younger than 1 day ⇒ ≥95  
   • 40‑day‑old promo ⇒ ≤10  
   All tests must run <200 ms.

5. Add `coverage_phase1.txt`, assert coverage ≥ phase0.

Commit once green.

### Prompt 2  –  Buckets & simple list API

DEFINITIONS
NOW        score ≥70  AND UNREAD
LATER      30 ≤ score <70 OR (score ≥70 AND UNREAD flag removed)
REFERENCE  score <30  AND not in TRASH

TASKS
1. Pure‑SQL helper `bucket_case.sql` in `backend/app/sql/`.
2. New FastAPI router `/buckets` with routes:
     GET /buckets/now?limit=50
     GET /buckets/later?limit=50
     GET /buckets/reference?limit=50
   Return JSON [{id, subject, score, labels}].

3. Pytest integration:
   • Factory inbox with 3 messages hitting each bucket.
   • GET each endpoint, assert counts & ordering.

4. Update OpenAPI docs auto‑generated.

Run docker verification:
  docker exec postgres_db psql -U postgres -d email_agent_db \
    -c "SELECT count(*) FROM emails WHERE attention_score IS NULL;" == 0


### Prompt 3  –  Suggestion Engine (Assist‑only)

ASSUMPTIONS
- Buckets API live.
- Schedules run via existing `sync_coordinator`.

SCHEMA
Alembic ➜ table `suggestions`:
  id PK, user_id FK, type ENUM('SWEEP','ARCHIVE'),
  payload JSONB, confidence Float, status
  ENUM('PROPOSED','ACCEPTED','REJECTED','PROCESSED'),
  created_at ts.

LOGIC  (cron once/day per user)
• SWEEP  → any sender with ≥15 unread messages all in REFERENCE
• ARCHIVE → any LATER msg older than 21 days & READ

IMPLEMENT
1. service/suggestions.py  (generate + persist)
2. router `/suggestions`
   GET  /suggestions  -> list PROPOSED
   POST /suggestions/{id}  body {"decision":"accept"|"reject"}

TESTS
• Seed inbox meeting criteria → expect suggestions.
• Accept call flips status.
• Docker psql check: ensure suggestions row inserted.

All new code covered ≥90 %.

### Prompt 4  –  Execute accepted suggestions

STEPS
1. Add Boolean `processed` to suggestions (Alembic).
2. Background task every 5 min:
     for each ACCEPTED & not processed
       enqueue EmailOperation:
         SWEEP  → TRASH + remove INBOX labels of payload ids
         ARCHIVE→ remove INBOX
       mark processed.
3. Re‑use existing EmailOperation flow; no Gmail calls in unit tests
   – use monkeypatch to intercept `gmail.update_email_labels`.

TEST
• Accept suggestion → runner → EmailOperation row exists.

Manual DB check:
  docker exec postgres_db psql -U postgres -d email_agent_db \
    -c "SELECT count(*) FROM email_operations;"  -- >0

### Prompt 5  –  Activity & Undo

SCHEMA
Alembic → table `activities`
  id, user_id, gmail_id, action ENUM('ARCHIVE','TRASH'),
  ts, source ENUM('USER','FLOW')

API
• GET  /activity?since=2025-01-01T00:00:00Z
• POST /activity/{id}/undo

LOGIC
- Every successful EmailOperation writes an activity row.
- Undo enqueues inverse EmailOperation & logs new row.

TESTS
• archive → activity row, undo → second row, email ops queued 2.

Docker DB sanity:
  SELECT count(*) FROM activities;

### Prompt 6  –  React PWA shell (read‑only)

FRONTEND STACK
Vite + React 18 + SWR + Tailwind.

TASKS
1. Scaffold repo `frontend/flowmail-dashboard`.
2. Service functions:
   useBuckets(now|later|reference)  → /buckets/*
   useSuggestions()                 → /suggestions
3. Pages
   • InboxView   – three lists & attention pill
   • Toast       – polls suggestions every 30 s, Accept/Reject calls
4. Jest tests for InboxView render; Vitest if preferred.
5. `npm run build` outputs to `frontend/dist`.
6. Add GitHub Action `ci-frontend.yml` lint + test.

No write paths yet – safe for staging demo.

### Prompt 7  –  Tone slider (Observe / Suggest / Act)

DB
Add column `flow_mode` to users  (ENUM OBSERVE, SUGGEST, ACT).

API
PATCH /users/me/flow_mode  body {"mode":"ACT"}

LOGIC
- Suggestion Engine still generates proposals.
- If mode == ACT  → auto‑ACCEPT any suggestion with confidence ≥0.8
  (confidence already computed).
- Toast component hides when mode == ACT.

TESTS
• Change mode via API, assert new suggestions auto‑processed.

Docker checks: select flow_mode from users;

### Prompt 8  –  Mobile & a11y polish

FRONTEND
1. Use Tailwind `sm:` `md:` breakpoints – lists collapse accordion.
2. Add aria‑labels, tabindex; run `axe` jest plugin – fail CI on red.
3. Service‑worker tweaks: offline shell, cache buckets fetch.

Test: Lighthouse PWA score ≥90 in CI job.

### Prompt 9  –  End‑to‑end Gmail sandbox smoke

SETUP
- Google test workspace with dummy inbox, service account creds.

SCRIPT
1. Spin up backend in Docker compose (`make up`).
2. Seed inbox via Gmail API: 25 promos, 5 important threads.
3. Run sync worker → wait.
4. Call /buckets/now → expect 5.
5. Switch mode ACT → wait cron → /buckets/reference empty promos.
6. Print summary; exit non‑zero on mismatch.

CI job `e2e.yml` triggers on release tag.

When green, you’re ready for extension work.

Best‑practice reminders baked into every prompt
Always run Alembic migration plus
docker exec postgres_db ... \d to prove the column/table exists.

Unit tests >90 % coverage on new modules; guard with --cov-fail-under.

No sleeps or random waits—use dependency injection + monkeypatch to stub Gmail.

Keep functions narrow; one responsibility; reuse shared utils.

Follow the sequence; do not skip; commit after each green CI.
Your FlowMail dashboard will be rock solid, incremental, and perfectly aligned with what Gmail truly exposes.
